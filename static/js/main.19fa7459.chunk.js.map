{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","padding","alignItems","avatar","margin","backgroundColor","palette","secondary","main","App","classes","useState","productname","specifity","sensitivity","products","setProducts","selectedProduct","setSelectedProduct","infected","setInfected","probabilityFalsePositive","setProbabilityFalsePositive","useEffect","console","log","newProducts","fetch","then","response","text","txt","parse","delimiter","err","output","map","p","push","parseFloat","replace","join","Container","component","maxWidth","CssBaseline","className","Avatar","Autocomplete","id","options","getOptionLabel","option","fullWidth","disableClearable","onChange","event","newValue","renderInput","params","TextField","label","InputProps","readOnly","name","value","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","notInfected","infectedPositiveTest","infectedNegativeTest","notInfectedPositiveTest","probability","dataset","Math","round","calcFalsePositive","Box","mt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19fa7459.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LocalHospitalIcon from \"@material-ui/icons/LocalHospital\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport parse from \"csv-parse\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Impressum \"}\n      <Link color=\"inherit\" href=\"https://zakotnik.de\">\n        Jure Zakotnik\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"5px\",\n    spacing: \"10px\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const defaultInfected = 150;\n  const [products, setProducts] = useState([\n    { productname: \"Standard\", specifity: 80, sensitivity: 95 },\n  ]);\n  const [selectedProduct, setSelectedProduct] = useState({\n    productname: \"Standard\",\n    specifity: 80,\n    sensitivity: 95,\n  });\n  const [infected, setInfected] = useState(defaultInfected);\n  const [probabilityFalsePositive, setProbabilityFalsePositive] = useState(\n    \"20%\"\n  );\n\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  const calcFalsePositive = () => {\n    //for clarity, this follows the example from RKI:\n    //debugger;\n    const totalPeople = 100000;\n    const notInfected = totalPeople - infected;\n    const infectedPositiveTest = (infected * selectedProduct.sensitivity) / 100;\n    const infectedNegativeTest =\n      infected * (1 - selectedProduct.sensitivity / 100);\n    const notInfectedPositiveTest =\n      notInfected * (1 - selectedProduct.specifity / 100);\n    const probability = infectedPositiveTest / notInfectedPositiveTest;\n    const dataset = {\n      specifity: selectedProduct.specifity,\n      sensitivity: selectedProduct.sensitivity,\n      infected: infected,\n      notInfected: notInfected,\n      infectedPositiveTest: infectedPositiveTest,\n      infectedNegativeTest: infectedNegativeTest,\n      notInfectedPositiveTest: notInfectedPositiveTest,\n      probability: probability,\n    };\n    console.log(dataset);\n    setProbabilityFalsePositive(Math.round(probability * 100));\n  };\n\n  useEffect(() => {\n    console.log(\"Starting web app and loading csv..\");\n    const newProducts = [...products];\n\n    fetch(\".//antigentests.csv\")\n      // Retrieve its body as ReadableStream\n      .then((response) => response.text())\n      .then((txt) => {\n        parse(\n          txt,\n          {\n            delimiter: \";\",\n          },\n          (err, output) => {\n            console.log(output);\n            output.map((p) => {\n              newProducts.push({\n                productname: p[3] + \" - \" + p[1],\n                specifity: parseFloat(p[10].replace(\",\", \".\")),\n                sensitivity: parseFloat(p[12].replace(\",\", \".\")),\n              });\n            });\n          }\n        );\n      });\n    setProducts(newProducts);\n  }, [products.join(\";\")]);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Bin ich wirklich Corona-positiv?\n        </Typography>\n        <Avatar className={classes.avatar}>\n          <LocalHospitalIcon />\n        </Avatar>\n\n        <Autocomplete\n          id=\"combo-box-demo\"\n          options={products}\n          getOptionLabel={(option) => option.productname}\n          fullWidth\n          disableClearable\n          onChange={(event, newValue) => {\n            console.log(newValue);\n            setSelectedProduct(newValue);\n          }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Antigen Test Hersteller\"\n              variant=\"outlined\"\n            />\n          )}\n        />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          InputProps={{\n            readOnly: true,\n          }}\n          fullWidth\n          name=\"sensitivity\"\n          label=\"Sensitivität\"\n          id=\"sensitivity\"\n          value={selectedProduct.sensitivity}\n        />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          InputProps={{\n            readOnly: true,\n          }}\n          fullWidth\n          name=\"specificity\"\n          label=\"Spezifität\"\n          id=\"specificity\"\n          value={selectedProduct.specifity}\n        />\n        <Typography component=\"h4\" variant=\"h7\">\n          Infizierte pro 100.000\n        </Typography>\n        <Slider\n          defaultValue={defaultInfected}\n          getAriaValueText={valuetext}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          step={10}\n          marks\n          min={20}\n          max={1000}\n          onChange={(event, newValue) => {\n            setInfected(newValue);\n            calcFalsePositive();\n          }}\n        />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          InputProps={{\n            readOnly: true,\n          }}\n          fullWidth\n          name=\"infected\"\n          label=\"Infizierte pro 100.000 Menschen\"\n          id=\"infected\"\n          value={infected}\n        />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          InputProps={{\n            readOnly: true,\n          }}\n          fullWidth\n          name=\"Wahrscheinlichkeit\"\n          label=\"Wahrscheinlichkeit für korrekten positiven Test\"\n          id=\"probability\"\n          value={probabilityFalsePositive + \" %\"}\n        />\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}