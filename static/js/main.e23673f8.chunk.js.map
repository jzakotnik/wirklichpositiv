{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","background","productParameters","display","flexDirection","resultProbabilities","paper","marginTop","spacing","padding","alignItems","avatar","margin","backgroundColor","palette","secondary","main","labels","App","classes","useState","productname","specifity","sensitivity","products","setProducts","selectedProduct","setSelectedProduct","infected","setInfected","probabilityFalsePositive","setProbabilityFalsePositive","probabilityFalseNegative","setProbabilityFalseNegative","useEffect","console","log","newProducts","fetch","process","then","response","text","txt","parse","delimiter","err","output","map","p","push","parseFloat","replace","notInfected","infectedPositiveTest","infectedNegativeTest","notInfectedPositiveTest","positiveprobability","negativeprobability","dataset","toFixed","calcFalsePositive","Container","component","maxWidth","className","Avatar","typography","Autocomplete","id","options","getOptionLabel","option","fullWidth","disableClearable","onChange","event","newValue","renderInput","params","TextField","label","InputProps","readOnly","name","value","Slider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","Box","mt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e23673f8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LocalHospitalIcon from \"@material-ui/icons/LocalHospital\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nimport parse from \"csv-parse\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      <Link color=\"inherit\" href=\"https://github.com/jzakotnik/wirklichpositiv\">\n        Impressum, Infos und Github\n      </Link>{\" \"}\n      - Jure Zakotnik {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: \"linear-gradient(45deg, #FEFFFB 30%, #FFEEF3 90%)\",\n  },\n  productParameters: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  resultProbabilities: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"1px\",\n    spacing: \"1px\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(2),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  labels: {\n    padding: \"5px\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const defaultInfected = 150;\n  const [products, setProducts] = useState([\n    { productname: \"Standard\", specifity: 80, sensitivity: 98 },\n  ]);\n  const [selectedProduct, setSelectedProduct] = useState({\n    productname: \"Standard\",\n    specifity: 98,\n    sensitivity: 80,\n  });\n  const [infected, setInfected] = useState(defaultInfected);\n  const [probabilityFalsePositive, setProbabilityFalsePositive] =\n    useState(\"20\");\n  const [probabilityFalseNegative, setProbabilityFalseNegative] =\n    useState(\"20\");\n\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  const calcFalsePositive = () => {\n    //for clarity, this follows the example from RKI:\n    //debugger;\n    const totalPeople = 100000;\n    const notInfected = totalPeople - infected;\n    const infectedPositiveTest = (infected * selectedProduct.sensitivity) / 100;\n    const infectedNegativeTest =\n      infected * (1 - selectedProduct.sensitivity / 100);\n    const notInfectedPositiveTest =\n      notInfected * (1 - selectedProduct.specifity / 100);\n    const notInfectedNegativeTest =\n      (selectedProduct.specifity / 100) * notInfected;\n    const positiveprobability =\n      infectedPositiveTest / (infectedPositiveTest + notInfectedPositiveTest);\n    const negativeprobability =\n      infectedNegativeTest / (infectedNegativeTest + notInfectedNegativeTest);\n    const dataset = {\n      specifity: selectedProduct.specifity,\n      sensitivity: selectedProduct.sensitivity,\n      infected: infected,\n      notInfected: notInfected,\n      infectedPositiveTest: infectedPositiveTest,\n      infectedNegativeTest: infectedNegativeTest,\n      notInfectedPositiveTest: notInfectedPositiveTest,\n      positiveprobability: positiveprobability * 100,\n      negativeprobability: negativeprobability * 100,\n    };\n    console.log(dataset);\n    setProbabilityFalsePositive((positiveprobability * 100).toFixed(1));\n    setProbabilityFalseNegative((negativeprobability * 100).toFixed(5));\n  };\n\n  useEffect(() => {\n    console.log(\"Starting web app and loading csv..\");\n    const newProducts = [...products];\n\n    fetch(process.env.PUBLIC_URL + \"/antigentests.csv\")\n      // Retrieve its body as ReadableStream\n      .then((response) => response.text())\n      .then((txt) => {\n        console.log(txt);\n        parse(\n          txt,\n          {\n            delimiter: \";\",\n          },\n          (err, output) => {\n            //console.log(output);\n            output.map((p) => {\n              //skip first line\n              if (p[2] != \"Hersteller\") {\n                newProducts.push({\n                  productname: p[3] + \" - \" + p[1],\n                  specifity: parseFloat(p[6].replace(\",\", \".\")),\n                  sensitivity: parseFloat(p[5].replace(\",\", \".\")),\n                });\n              }\n              return true;\n            });\n          }\n        );\n      });\n    setProducts(newProducts);\n    setInfected(defaultInfected);\n  }, []);\n\n  useEffect(() => {\n    //console.log(\"Refreshing calculation\");\n    calcFalsePositive();\n    return () => {};\n  }, [selectedProduct, infected]);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <div className={classes.root}>\n        <div className={classes.paper}>\n          <Typography component=\"h2\" variant=\"h5\">\n            Bin ich wirklich Corona-positiv?\n          </Typography>\n          <Avatar className={classes.avatar}>\n            <LocalHospitalIcon />\n          </Avatar>\n          <Typography component=\"h4\" variant=\"h7\">\n            Welcher Antigen-Test?\n          </Typography>\n          <div className={classes.typography}>\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={products}\n              getOptionLabel={(option) => option.productname}\n              fullWidth\n              disableClearable\n              onChange={(event, newValue) => {\n                console.log(newValue);\n                setSelectedProduct(newValue);\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Antigen-Test-Hersteller\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n            <div className={classes.productParameters}>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                fullWidth\n                name=\"sensitivity\"\n                label=\"Sensitivität\"\n                id=\"sensitivity\"\n                value={selectedProduct.sensitivity}\n              />\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                fullWidth\n                name=\"specificity\"\n                label=\"Spezifität\"\n                id=\"specificity\"\n                value={selectedProduct.specifity}\n              />\n            </div>\n            <Typography component=\"h4\" variant=\"h7\">\n              Wieviele Infizierte pro 100.000?\n            </Typography>\n            <Slider\n              defaultValue={defaultInfected}\n              getAriaValueText={valuetext}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={10}\n              marks\n              min={20}\n              max={1000}\n              onChange={(event, newValue) => {\n                setInfected(newValue);\n              }}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              InputProps={{\n                readOnly: true,\n              }}\n              fullWidth\n              name=\"infected\"\n              label=\"Infizierte pro 100.000 Menschen\"\n              id=\"infected\"\n              value={infected}\n            />\n            <div>\n              <Typography component=\"h4\" variant=\"h7\">\n                Ich habe ein positives Testergebnis: Wie wahrscheinlich bin ich\n                akut infiziert?\n              </Typography>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                fullWidth\n                name=\"Wahrscheinlichkeit\"\n                label=\"Wahrscheinlichkeit\"\n                id=\"probability\"\n                value={probabilityFalsePositive + \" %\"}\n              />\n              <Typography component=\"h4\" variant=\"h7\">\n                Ich habe ein negatives Testergebnis: Wie wahrscheinlich bin ich\n                doch akut infiziert?\n              </Typography>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: true,\n                }}\n                fullWidth\n                name=\"Wahrscheinlichkeit negativ\"\n                label=\"Wahrscheinlichkeit\"\n                id=\"probabilit_negative\"\n                value={probabilityFalseNegative + \" %\"}\n              />\n            </div>\n            <Typography component=\"h4\" variant=\"h7\">\n              Worum geht es?\n            </Typography>\n            <Typography component=\"p\" variant=\"p\">\n              Wie in der{\" \"}\n              <a href=\"https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Infografik_Antigentest_PDF.html\">\n                RKI Infografik\n              </a>{\" \"}\n              schön dargestellt, gibt es bei ungezielten Tests eine\n              Wahrscheinlichkeit, dass man trotz positivem Antigen-Corona-Test\n              nicht infiziert ist. Sie hängt von den Eigenschaften des Tests ab\n              und der Anzahl der Infizierten in der Bevölkerung. Die Berechnung\n              dieser Wahrscheinlichkeit lässt sich hier nachvollziehen. Viel\n              Spaß!\n            </Typography>\n          </div>\n        </div>\n      </div>\n\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}